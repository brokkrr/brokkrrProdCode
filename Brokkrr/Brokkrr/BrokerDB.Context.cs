//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BrokerMVC
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BrokerDBEntities : DbContext
    {
        public BrokerDBEntities()
            : base("name=BrokerDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AutoInsuranceDetail> AutoInsuranceDetails { get; set; }
        public virtual DbSet<AutoTypeMaster> AutoTypeMasters { get; set; }
        public virtual DbSet<BenefitsInsuranceDetail> BenefitsInsuranceDetails { get; set; }
        public virtual DbSet<BrokerAvailability> BrokerAvailabilities { get; set; }
        public virtual DbSet<BrokerPayment> BrokerPayments { get; set; }
        public virtual DbSet<BusinessInsuranceDetail> BusinessInsuranceDetails { get; set; }
        public virtual DbSet<CompanyMaster> CompanyMasters { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<HomeInsuranceDetail> HomeInsuranceDetails { get; set; }
        public virtual DbSet<IndustryMaster> IndustryMasters { get; set; }
        public virtual DbSet<InsuranceTypeMaster> InsuranceTypeMasters { get; set; }
        public virtual DbSet<LifeInsuranceDetail> LifeInsuranceDetails { get; set; }
        public virtual DbSet<PaymentMaster> PaymentMasters { get; set; }
        public virtual DbSet<SubIndustryMaster> SubIndustryMasters { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserBroker> UserBrokers { get; set; }
        public virtual DbSet<UserExperience> UserExperiences { get; set; }
        public virtual DbSet<UserIndustry> UserIndustries { get; set; }
        public virtual DbSet<WebsiteLog> WebsiteLogs { get; set; }
        public virtual DbSet<BrokerMessage> BrokerMessages { get; set; }
        public virtual DbSet<Config> Configs { get; set; }
        public virtual DbSet<CustomerBrokerChat> CustomerBrokerChats { get; set; }
        public virtual DbSet<CustomerMessage> CustomerMessages { get; set; }
        public virtual DbSet<UserEducation> UserEducations { get; set; }
        public virtual DbSet<UserSerchedZipCode> UserSerchedZipCodes { get; set; }
        public virtual DbSet<UserZipCode> UserZipCodes { get; set; }
        public virtual DbSet<BrokerBriefcase> BrokerBriefcases { get; set; }
        public virtual DbSet<WatchedVideoHistory> WatchedVideoHistories { get; set; }
    
        [DbFunction("BrokerDBEntities", "ParseCommaDelimitedString")]
        public virtual IQueryable<ParseCommaDelimitedString_Result> ParseCommaDelimitedString(string commaSeparatedStr)
        {
            var commaSeparatedStrParameter = commaSeparatedStr != null ?
                new ObjectParameter("CommaSeparatedStr", commaSeparatedStr) :
                new ObjectParameter("CommaSeparatedStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ParseCommaDelimitedString_Result>("[BrokerDBEntities].[ParseCommaDelimitedString](@CommaSeparatedStr)", commaSeparatedStrParameter);
        }
    
        public virtual int spErrorLog(Nullable<int> userId, string errorType, string errorMessage, string pageName, string iPAddress)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var errorTypeParameter = errorType != null ?
                new ObjectParameter("ErrorType", errorType) :
                new ObjectParameter("ErrorType", typeof(string));
    
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spErrorLog", userIdParameter, errorTypeParameter, errorMessageParameter, pageNameParameter, iPAddressParameter);
        }
    
        public virtual ObjectResult<spGetUserDetails_Result> spGetUserDetails(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserDetails_Result>("spGetUserDetails", userIdParameter);
        }
    
        public virtual ObjectResult<spRegisterUser_Result> spRegisterUser(string firstName, string lastName, string emailId, string password, string address, string city, string state, string country, string pinCode, string mobNo, Nullable<bool> isActive, string userType, string registerdType, Nullable<bool> isUpdateProfile, string registrationCode, string registeredFor)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var pinCodeParameter = pinCode != null ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(string));
    
            var mobNoParameter = mobNo != null ?
                new ObjectParameter("MobNo", mobNo) :
                new ObjectParameter("MobNo", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var registerdTypeParameter = registerdType != null ?
                new ObjectParameter("RegisterdType", registerdType) :
                new ObjectParameter("RegisterdType", typeof(string));
    
            var isUpdateProfileParameter = isUpdateProfile.HasValue ?
                new ObjectParameter("IsUpdateProfile", isUpdateProfile) :
                new ObjectParameter("IsUpdateProfile", typeof(bool));
    
            var registrationCodeParameter = registrationCode != null ?
                new ObjectParameter("RegistrationCode", registrationCode) :
                new ObjectParameter("RegistrationCode", typeof(string));
    
            var registeredForParameter = registeredFor != null ?
                new ObjectParameter("RegisteredFor", registeredFor) :
                new ObjectParameter("RegisteredFor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRegisterUser_Result>("spRegisterUser", firstNameParameter, lastNameParameter, emailIdParameter, passwordParameter, addressParameter, cityParameter, stateParameter, countryParameter, pinCodeParameter, mobNoParameter, isActiveParameter, userTypeParameter, registerdTypeParameter, isUpdateProfileParameter, registrationCodeParameter, registeredForParameter);
        }
    
        public virtual ObjectResult<string> spUpdateBroker(Nullable<int> userId, string firstName, string lastName, string address, string city, string state, string country, string pinCode, string mobNo, string companyName, string title, string resume, string designation, string languages, string specialities, string dOB, string profilePicture, string phoneNo, string awards, string skills, string recomendations, string license, string expiryDate, string exp_Designation, string exp_CompanyName, string exp_DurationFrom, string exp_DurationTo, string edu_UniversityName, string edu_CourseName, string edu_DurationFrom, string edu_DurationTo, string updateTable, string profilePicImagePath, string resumeImagePath)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var pinCodeParameter = pinCode != null ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(string));
    
            var mobNoParameter = mobNo != null ?
                new ObjectParameter("MobNo", mobNo) :
                new ObjectParameter("MobNo", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var resumeParameter = resume != null ?
                new ObjectParameter("Resume", resume) :
                new ObjectParameter("Resume", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var languagesParameter = languages != null ?
                new ObjectParameter("Languages", languages) :
                new ObjectParameter("Languages", typeof(string));
    
            var specialitiesParameter = specialities != null ?
                new ObjectParameter("Specialities", specialities) :
                new ObjectParameter("Specialities", typeof(string));
    
            var dOBParameter = dOB != null ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(string));
    
            var profilePictureParameter = profilePicture != null ?
                new ObjectParameter("ProfilePicture", profilePicture) :
                new ObjectParameter("ProfilePicture", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var awardsParameter = awards != null ?
                new ObjectParameter("Awards", awards) :
                new ObjectParameter("Awards", typeof(string));
    
            var skillsParameter = skills != null ?
                new ObjectParameter("Skills", skills) :
                new ObjectParameter("Skills", typeof(string));
    
            var recomendationsParameter = recomendations != null ?
                new ObjectParameter("Recomendations", recomendations) :
                new ObjectParameter("Recomendations", typeof(string));
    
            var licenseParameter = license != null ?
                new ObjectParameter("License", license) :
                new ObjectParameter("License", typeof(string));
    
            var expiryDateParameter = expiryDate != null ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(string));
    
            var exp_DesignationParameter = exp_Designation != null ?
                new ObjectParameter("Exp_Designation", exp_Designation) :
                new ObjectParameter("Exp_Designation", typeof(string));
    
            var exp_CompanyNameParameter = exp_CompanyName != null ?
                new ObjectParameter("Exp_CompanyName", exp_CompanyName) :
                new ObjectParameter("Exp_CompanyName", typeof(string));
    
            var exp_DurationFromParameter = exp_DurationFrom != null ?
                new ObjectParameter("Exp_DurationFrom", exp_DurationFrom) :
                new ObjectParameter("Exp_DurationFrom", typeof(string));
    
            var exp_DurationToParameter = exp_DurationTo != null ?
                new ObjectParameter("Exp_DurationTo", exp_DurationTo) :
                new ObjectParameter("Exp_DurationTo", typeof(string));
    
            var edu_UniversityNameParameter = edu_UniversityName != null ?
                new ObjectParameter("Edu_UniversityName", edu_UniversityName) :
                new ObjectParameter("Edu_UniversityName", typeof(string));
    
            var edu_CourseNameParameter = edu_CourseName != null ?
                new ObjectParameter("Edu_CourseName", edu_CourseName) :
                new ObjectParameter("Edu_CourseName", typeof(string));
    
            var edu_DurationFromParameter = edu_DurationFrom != null ?
                new ObjectParameter("Edu_DurationFrom", edu_DurationFrom) :
                new ObjectParameter("Edu_DurationFrom", typeof(string));
    
            var edu_DurationToParameter = edu_DurationTo != null ?
                new ObjectParameter("Edu_DurationTo", edu_DurationTo) :
                new ObjectParameter("Edu_DurationTo", typeof(string));
    
            var updateTableParameter = updateTable != null ?
                new ObjectParameter("UpdateTable", updateTable) :
                new ObjectParameter("UpdateTable", typeof(string));
    
            var profilePicImagePathParameter = profilePicImagePath != null ?
                new ObjectParameter("ProfilePicImagePath", profilePicImagePath) :
                new ObjectParameter("ProfilePicImagePath", typeof(string));
    
            var resumeImagePathParameter = resumeImagePath != null ?
                new ObjectParameter("ResumeImagePath", resumeImagePath) :
                new ObjectParameter("ResumeImagePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spUpdateBroker", userIdParameter, firstNameParameter, lastNameParameter, addressParameter, cityParameter, stateParameter, countryParameter, pinCodeParameter, mobNoParameter, companyNameParameter, titleParameter, resumeParameter, designationParameter, languagesParameter, specialitiesParameter, dOBParameter, profilePictureParameter, phoneNoParameter, awardsParameter, skillsParameter, recomendationsParameter, licenseParameter, expiryDateParameter, exp_DesignationParameter, exp_CompanyNameParameter, exp_DurationFromParameter, exp_DurationToParameter, edu_UniversityNameParameter, edu_CourseNameParameter, edu_DurationFromParameter, edu_DurationToParameter, updateTableParameter, profilePicImagePathParameter, resumeImagePathParameter);
        }
    
        public virtual ObjectResult<string> spUpdateCustomer(Nullable<int> userId, string firstName, string lastName, string address, string city, string state, string country, string pinCode, string mobNo, string houseType, string addressOfHouse, Nullable<bool> isHavingCar, string noOfCars, string typeOfEmployment, string companyName, string profilePicture, string phoneNo, string dOB, string profilePicImagePath)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var pinCodeParameter = pinCode != null ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(string));
    
            var mobNoParameter = mobNo != null ?
                new ObjectParameter("MobNo", mobNo) :
                new ObjectParameter("MobNo", typeof(string));
    
            var houseTypeParameter = houseType != null ?
                new ObjectParameter("HouseType", houseType) :
                new ObjectParameter("HouseType", typeof(string));
    
            var addressOfHouseParameter = addressOfHouse != null ?
                new ObjectParameter("AddressOfHouse", addressOfHouse) :
                new ObjectParameter("AddressOfHouse", typeof(string));
    
            var isHavingCarParameter = isHavingCar.HasValue ?
                new ObjectParameter("IsHavingCar", isHavingCar) :
                new ObjectParameter("IsHavingCar", typeof(bool));
    
            var noOfCarsParameter = noOfCars != null ?
                new ObjectParameter("NoOfCars", noOfCars) :
                new ObjectParameter("NoOfCars", typeof(string));
    
            var typeOfEmploymentParameter = typeOfEmployment != null ?
                new ObjectParameter("TypeOfEmployment", typeOfEmployment) :
                new ObjectParameter("TypeOfEmployment", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var profilePictureParameter = profilePicture != null ?
                new ObjectParameter("ProfilePicture", profilePicture) :
                new ObjectParameter("ProfilePicture", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var dOBParameter = dOB != null ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(string));
    
            var profilePicImagePathParameter = profilePicImagePath != null ?
                new ObjectParameter("ProfilePicImagePath", profilePicImagePath) :
                new ObjectParameter("ProfilePicImagePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spUpdateCustomer", userIdParameter, firstNameParameter, lastNameParameter, addressParameter, cityParameter, stateParameter, countryParameter, pinCodeParameter, mobNoParameter, houseTypeParameter, addressOfHouseParameter, isHavingCarParameter, noOfCarsParameter, typeOfEmploymentParameter, companyNameParameter, profilePictureParameter, phoneNoParameter, dOBParameter, profilePicImagePathParameter);
        }
    
        public virtual ObjectResult<spUpdateCustomerForWeb_Result> spUpdateCustomerForWeb(Nullable<int> userId, string firstName, string lastName, string phone, string address, string zipCode, string houseType, string isHavingCars, Nullable<int> noOfCars, string occupation, string companyName, string profilePicture, string profilePictureImg, string isProfileUpdated, string noofEmployee, string estPremium, string website)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var houseTypeParameter = houseType != null ?
                new ObjectParameter("HouseType", houseType) :
                new ObjectParameter("HouseType", typeof(string));
    
            var isHavingCarsParameter = isHavingCars != null ?
                new ObjectParameter("IsHavingCars", isHavingCars) :
                new ObjectParameter("IsHavingCars", typeof(string));
    
            var noOfCarsParameter = noOfCars.HasValue ?
                new ObjectParameter("NoOfCars", noOfCars) :
                new ObjectParameter("NoOfCars", typeof(int));
    
            var occupationParameter = occupation != null ?
                new ObjectParameter("Occupation", occupation) :
                new ObjectParameter("Occupation", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var profilePictureParameter = profilePicture != null ?
                new ObjectParameter("ProfilePicture", profilePicture) :
                new ObjectParameter("ProfilePicture", typeof(string));
    
            var profilePictureImgParameter = profilePictureImg != null ?
                new ObjectParameter("ProfilePictureImg", profilePictureImg) :
                new ObjectParameter("ProfilePictureImg", typeof(string));
    
            var isProfileUpdatedParameter = isProfileUpdated != null ?
                new ObjectParameter("IsProfileUpdated", isProfileUpdated) :
                new ObjectParameter("IsProfileUpdated", typeof(string));
    
            var noofEmployeeParameter = noofEmployee != null ?
                new ObjectParameter("NoofEmployee", noofEmployee) :
                new ObjectParameter("NoofEmployee", typeof(string));
    
            var estPremiumParameter = estPremium != null ?
                new ObjectParameter("EstPremium", estPremium) :
                new ObjectParameter("EstPremium", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUpdateCustomerForWeb_Result>("spUpdateCustomerForWeb", userIdParameter, firstNameParameter, lastNameParameter, phoneParameter, addressParameter, zipCodeParameter, houseTypeParameter, isHavingCarsParameter, noOfCarsParameter, occupationParameter, companyNameParameter, profilePictureParameter, profilePictureImgParameter, isProfileUpdatedParameter, noofEmployeeParameter, estPremiumParameter, websiteParameter);
        }
    
        public virtual int spUpdateUser(Nullable<int> userId, string password, string address, string city, Nullable<int> stateId, Nullable<int> countryId, string pinCode, string mobNo, Nullable<bool> isActive, string userType, Nullable<bool> isUpdateProfile)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var pinCodeParameter = pinCode != null ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(string));
    
            var mobNoParameter = mobNo != null ?
                new ObjectParameter("MobNo", mobNo) :
                new ObjectParameter("MobNo", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var isUpdateProfileParameter = isUpdateProfile.HasValue ?
                new ObjectParameter("IsUpdateProfile", isUpdateProfile) :
                new ObjectParameter("IsUpdateProfile", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateUser", userIdParameter, passwordParameter, addressParameter, cityParameter, stateIdParameter, countryIdParameter, pinCodeParameter, mobNoParameter, isActiveParameter, userTypeParameter, isUpdateProfileParameter);
        }
    
        public virtual int spWebsiteLog(Nullable<int> userId, string type, string logMessage)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var logMessageParameter = logMessage != null ?
                new ObjectParameter("LogMessage", logMessage) :
                new ObjectParameter("LogMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spWebsiteLog", userIdParameter, typeParameter, logMessageParameter);
        }
    
        public virtual int uspBrokerMessages(Nullable<int> userId, Nullable<int> brokerId, string insuranceType, string note, string localDateTime)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var brokerIdParameter = brokerId.HasValue ?
                new ObjectParameter("BrokerId", brokerId) :
                new ObjectParameter("BrokerId", typeof(int));
    
            var insuranceTypeParameter = insuranceType != null ?
                new ObjectParameter("InsuranceType", insuranceType) :
                new ObjectParameter("InsuranceType", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var localDateTimeParameter = localDateTime != null ?
                new ObjectParameter("LocalDateTime", localDateTime) :
                new ObjectParameter("LocalDateTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspBrokerMessages", userIdParameter, brokerIdParameter, insuranceTypeParameter, noteParameter, localDateTimeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspCheckBrokerLogin(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspCheckBrokerLogin", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<uspCheckForValidEmailId_Result> uspCheckForValidEmailId(string emailId)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspCheckForValidEmailId_Result>("uspCheckForValidEmailId", emailIdParameter);
        }
    
        public virtual int uspContactBroker(Nullable<int> userId, Nullable<int> brokerId, string insuranceType)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var brokerIdParameter = brokerId.HasValue ?
                new ObjectParameter("BrokerId", brokerId) :
                new ObjectParameter("BrokerId", typeof(int));
    
            var insuranceTypeParameter = insuranceType != null ?
                new ObjectParameter("InsuranceType", insuranceType) :
                new ObjectParameter("InsuranceType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspContactBroker", userIdParameter, brokerIdParameter, insuranceTypeParameter);
        }
    
        public virtual int uspDeleteBrokerDetails(string emailId, string tableName, string arrayList)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var arrayListParameter = arrayList != null ?
                new ObjectParameter("ArrayList", arrayList) :
                new ObjectParameter("ArrayList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteBrokerDetails", emailIdParameter, tableNameParameter, arrayListParameter);
        }
    
        public virtual int uspDeleteBrokerSubDetailsWeb(Nullable<int> userId, string tableName)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteBrokerSubDetailsWeb", userIdParameter, tableNameParameter);
        }
    
        public virtual int uspDeleteIndustryId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteIndustryId", userIdParameter);
        }
    
        public virtual int uspDeleteMessage(Nullable<int> userId, Nullable<int> messageId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var messageIdParameter = messageId.HasValue ?
                new ObjectParameter("MessageId", messageId) :
                new ObjectParameter("MessageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteMessage", userIdParameter, messageIdParameter);
        }
    
        public virtual int uspDeleteMultipleChatMessages(Nullable<int> userId, string messageId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var messageIdParameter = messageId != null ?
                new ObjectParameter("MessageId", messageId) :
                new ObjectParameter("MessageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteMultipleChatMessages", userIdParameter, messageIdParameter);
        }
    
        public virtual int uspDeleteMultipleMessages(Nullable<int> userId, string messageId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var messageIdParameter = messageId != null ?
                new ObjectParameter("MessageId", messageId) :
                new ObjectParameter("MessageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteMultipleMessages", userIdParameter, messageIdParameter);
        }
    
        public virtual int uspForgetPasswordRanNum(string emailId, string forgetPasswordRanNum)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var forgetPasswordRanNumParameter = forgetPasswordRanNum != null ?
                new ObjectParameter("ForgetPasswordRanNum", forgetPasswordRanNum) :
                new ObjectParameter("ForgetPasswordRanNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspForgetPasswordRanNum", emailIdParameter, forgetPasswordRanNumParameter);
        }
    
        public virtual ObjectResult<uspGetBrokerDetails_Result> uspGetBrokerDetails(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetBrokerDetails_Result>("uspGetBrokerDetails", userNameParameter);
        }
    
        public virtual ObjectResult<uspGetBrokersAvailabilty_Result> uspGetBrokersAvailabilty(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetBrokersAvailabilty_Result>("uspGetBrokersAvailabilty", userIdParameter);
        }
    
        public virtual ObjectResult<uspGetBrokersList_Result> uspGetBrokersList(Nullable<int> userId, string zipCode, string city, string language, string speciality, string longitude, string latitude, string withinmiles, string searchCriteria, Nullable<int> industryId, string subIndustryId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var specialityParameter = speciality != null ?
                new ObjectParameter("Speciality", speciality) :
                new ObjectParameter("Speciality", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var withinmilesParameter = withinmiles != null ?
                new ObjectParameter("Withinmiles", withinmiles) :
                new ObjectParameter("Withinmiles", typeof(string));
    
            var searchCriteriaParameter = searchCriteria != null ?
                new ObjectParameter("SearchCriteria", searchCriteria) :
                new ObjectParameter("SearchCriteria", typeof(string));
    
            var industryIdParameter = industryId.HasValue ?
                new ObjectParameter("IndustryId", industryId) :
                new ObjectParameter("IndustryId", typeof(int));
    
            var subIndustryIdParameter = subIndustryId != null ?
                new ObjectParameter("SubIndustryId", subIndustryId) :
                new ObjectParameter("SubIndustryId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetBrokersList_Result>("uspGetBrokersList", userIdParameter, zipCodeParameter, cityParameter, languageParameter, specialityParameter, longitudeParameter, latitudeParameter, withinmilesParameter, searchCriteriaParameter, industryIdParameter, subIndustryIdParameter);
        }
    
        public virtual ObjectResult<uspGetChatMessages_Result> uspGetChatMessages(Nullable<int> userId, string timeSpan)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var timeSpanParameter = timeSpan != null ?
                new ObjectParameter("TimeSpan", timeSpan) :
                new ObjectParameter("TimeSpan", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetChatMessages_Result>("uspGetChatMessages", userIdParameter, timeSpanParameter);
        }
    
        public virtual ObjectResult<uspGetChatMessages1_Result> uspGetChatMessages1(Nullable<int> messageID, Nullable<int> userId, string isRead)
        {
            var messageIDParameter = messageID.HasValue ?
                new ObjectParameter("MessageID", messageID) :
                new ObjectParameter("MessageID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isReadParameter = isRead != null ?
                new ObjectParameter("IsRead", isRead) :
                new ObjectParameter("IsRead", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetChatMessages1_Result>("uspGetChatMessages1", messageIDParameter, userIdParameter, isReadParameter);
        }
    
        public virtual ObjectResult<uspGetChatMessagesByMessageId_Result> uspGetChatMessagesByMessageId(Nullable<int> userId, Nullable<int> messageID, string timeStamp)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var messageIDParameter = messageID.HasValue ?
                new ObjectParameter("MessageID", messageID) :
                new ObjectParameter("MessageID", typeof(int));
    
            var timeStampParameter = timeStamp != null ?
                new ObjectParameter("TimeStamp", timeStamp) :
                new ObjectParameter("TimeStamp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetChatMessagesByMessageId_Result>("uspGetChatMessagesByMessageId", userIdParameter, messageIDParameter, timeStampParameter);
        }
    
        public virtual ObjectResult<uspGetCompanyMaster_Result> uspGetCompanyMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetCompanyMaster_Result>("uspGetCompanyMaster");
        }
    
        public virtual ObjectResult<uspGetContactedBrokersList_Result> uspGetContactedBrokersList(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetContactedBrokersList_Result>("uspGetContactedBrokersList", userIdParameter);
        }
    
        public virtual ObjectResult<uspGetContactedList_Result> uspGetContactedList(Nullable<int> userId, string timeStamp)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var timeStampParameter = timeStamp != null ?
                new ObjectParameter("TimeStamp", timeStamp) :
                new ObjectParameter("TimeStamp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetContactedList_Result>("uspGetContactedList", userIdParameter, timeStampParameter);
        }
    
        public virtual ObjectResult<uspGetCurrentTimeSpan_Result> uspGetCurrentTimeSpan()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetCurrentTimeSpan_Result>("uspGetCurrentTimeSpan");
        }
    
        public virtual ObjectResult<uspGetIndustryMaster_Result> uspGetIndustryMaster(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetIndustryMaster_Result>("uspGetIndustryMaster", companyIdParameter);
        }
    
        public virtual ObjectResult<uspGetPaymentAmount_Result> uspGetPaymentAmount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetPaymentAmount_Result>("uspGetPaymentAmount");
        }
    
        public virtual ObjectResult<uspGetSubIndustryMaster_Result> uspGetSubIndustryMaster(Nullable<int> industryId)
        {
            var industryIdParameter = industryId.HasValue ?
                new ObjectParameter("IndustryId", industryId) :
                new ObjectParameter("IndustryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSubIndustryMaster_Result>("uspGetSubIndustryMaster", industryIdParameter);
        }
    
        public virtual ObjectResult<uspGetUnreadChatMessages_Result> uspGetUnreadChatMessages(Nullable<int> userId, Nullable<int> messageID)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var messageIDParameter = messageID.HasValue ?
                new ObjectParameter("MessageID", messageID) :
                new ObjectParameter("MessageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUnreadChatMessages_Result>("uspGetUnreadChatMessages", userIdParameter, messageIDParameter);
        }
    
        public virtual int uspGetUnreadMsgCount(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetUnreadMsgCount", userIdParameter);
        }
    
        public virtual int uspgetUnreadMsgCountByDeviceid(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspgetUnreadMsgCountByDeviceid", userIdParameter);
        }
    
        public virtual ObjectResult<uspGetUserAndPaymentList_Result> uspGetUserAndPaymentList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUserAndPaymentList_Result>("uspGetUserAndPaymentList");
        }
    
        public virtual int uspHomeInsuranceDetails(Nullable<int> userId, string zipCode, string city, string estimatedValue, Nullable<bool> isInsured, string companyName, string coverageExpires, string language, string notes, string longitude, string latitude, string path, string declarationDocBase64)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var estimatedValueParameter = estimatedValue != null ?
                new ObjectParameter("EstimatedValue", estimatedValue) :
                new ObjectParameter("EstimatedValue", typeof(string));
    
            var isInsuredParameter = isInsured.HasValue ?
                new ObjectParameter("IsInsured", isInsured) :
                new ObjectParameter("IsInsured", typeof(bool));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var coverageExpiresParameter = coverageExpires != null ?
                new ObjectParameter("CoverageExpires", coverageExpires) :
                new ObjectParameter("CoverageExpires", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var declarationDocBase64Parameter = declarationDocBase64 != null ?
                new ObjectParameter("DeclarationDocBase64", declarationDocBase64) :
                new ObjectParameter("DeclarationDocBase64", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspHomeInsuranceDetails", userIdParameter, zipCodeParameter, cityParameter, estimatedValueParameter, isInsuredParameter, companyNameParameter, coverageExpiresParameter, languageParameter, notesParameter, longitudeParameter, latitudeParameter, pathParameter, declarationDocBase64Parameter);
        }
    
        public virtual int uspInsertIndustryId(Nullable<int> userId, Nullable<int> industryId, Nullable<int> subIndustryId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var industryIdParameter = industryId.HasValue ?
                new ObjectParameter("IndustryId", industryId) :
                new ObjectParameter("IndustryId", typeof(int));
    
            var subIndustryIdParameter = subIndustryId.HasValue ?
                new ObjectParameter("SubIndustryId", subIndustryId) :
                new ObjectParameter("SubIndustryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertIndustryId", userIdParameter, industryIdParameter, subIndustryIdParameter);
        }
    
        public virtual int uspInsertNewPayment(Nullable<decimal> amount, Nullable<System.DateTime> dateOfEffect)
        {
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var dateOfEffectParameter = dateOfEffect.HasValue ?
                new ObjectParameter("DateOfEffect", dateOfEffect) :
                new ObjectParameter("DateOfEffect", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertNewPayment", amountParameter, dateOfEffectParameter);
        }
    
        public virtual ObjectResult<uspInsertPaymentDetails_Result> uspInsertPaymentDetails(Nullable<int> userId, string paymentId, string itemName, string description, Nullable<decimal> amount, Nullable<bool> isPaid, string paymentMode)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var paymentIdParameter = paymentId != null ?
                new ObjectParameter("PaymentId", paymentId) :
                new ObjectParameter("PaymentId", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(bool));
    
            var paymentModeParameter = paymentMode != null ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspInsertPaymentDetails_Result>("uspInsertPaymentDetails", userIdParameter, paymentIdParameter, itemNameParameter, descriptionParameter, amountParameter, isPaidParameter, paymentModeParameter);
        }
    
        public virtual int uspResetPassword(string emailId, string password)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspResetPassword", emailIdParameter, passwordParameter);
        }
    
        public virtual int uspSaveAutoInsuranceDetails(Nullable<int> userId, string zipCode, string city, string vehicleType, Nullable<bool> isInsured, string insuranceCompany, string coverageExpires, string language, string notes, string longitude, string latitude, string docPath, string declarationDocBase64)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var vehicleTypeParameter = vehicleType != null ?
                new ObjectParameter("VehicleType", vehicleType) :
                new ObjectParameter("VehicleType", typeof(string));
    
            var isInsuredParameter = isInsured.HasValue ?
                new ObjectParameter("IsInsured", isInsured) :
                new ObjectParameter("IsInsured", typeof(bool));
    
            var insuranceCompanyParameter = insuranceCompany != null ?
                new ObjectParameter("InsuranceCompany", insuranceCompany) :
                new ObjectParameter("InsuranceCompany", typeof(string));
    
            var coverageExpiresParameter = coverageExpires != null ?
                new ObjectParameter("CoverageExpires", coverageExpires) :
                new ObjectParameter("CoverageExpires", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var docPathParameter = docPath != null ?
                new ObjectParameter("DocPath", docPath) :
                new ObjectParameter("DocPath", typeof(string));
    
            var declarationDocBase64Parameter = declarationDocBase64 != null ?
                new ObjectParameter("DeclarationDocBase64", declarationDocBase64) :
                new ObjectParameter("DeclarationDocBase64", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveAutoInsuranceDetails", userIdParameter, zipCodeParameter, cityParameter, vehicleTypeParameter, isInsuredParameter, insuranceCompanyParameter, coverageExpiresParameter, languageParameter, notesParameter, longitudeParameter, latitudeParameter, docPathParameter, declarationDocBase64Parameter);
        }
    
        public virtual int uspSaveBenefitsInsuranceDetails(Nullable<int> userId, string zipCode, string city, string isInsured, string insuranceCompany, string employeeStrength, string coverageExpires, string language, string notes, string longitude, string latitude, Nullable<int> industryId, string subIndustryId, string docPath, string declarationDocBase64)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var isInsuredParameter = isInsured != null ?
                new ObjectParameter("IsInsured", isInsured) :
                new ObjectParameter("IsInsured", typeof(string));
    
            var insuranceCompanyParameter = insuranceCompany != null ?
                new ObjectParameter("InsuranceCompany", insuranceCompany) :
                new ObjectParameter("InsuranceCompany", typeof(string));
    
            var employeeStrengthParameter = employeeStrength != null ?
                new ObjectParameter("EmployeeStrength", employeeStrength) :
                new ObjectParameter("EmployeeStrength", typeof(string));
    
            var coverageExpiresParameter = coverageExpires != null ?
                new ObjectParameter("CoverageExpires", coverageExpires) :
                new ObjectParameter("CoverageExpires", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var industryIdParameter = industryId.HasValue ?
                new ObjectParameter("IndustryId", industryId) :
                new ObjectParameter("IndustryId", typeof(int));
    
            var subIndustryIdParameter = subIndustryId != null ?
                new ObjectParameter("SubIndustryId", subIndustryId) :
                new ObjectParameter("SubIndustryId", typeof(string));
    
            var docPathParameter = docPath != null ?
                new ObjectParameter("DocPath", docPath) :
                new ObjectParameter("DocPath", typeof(string));
    
            var declarationDocBase64Parameter = declarationDocBase64 != null ?
                new ObjectParameter("DeclarationDocBase64", declarationDocBase64) :
                new ObjectParameter("DeclarationDocBase64", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveBenefitsInsuranceDetails", userIdParameter, zipCodeParameter, cityParameter, isInsuredParameter, insuranceCompanyParameter, employeeStrengthParameter, coverageExpiresParameter, languageParameter, notesParameter, longitudeParameter, latitudeParameter, industryIdParameter, subIndustryIdParameter, docPathParameter, declarationDocBase64Parameter);
        }
    
        public virtual ObjectResult<uspSaveBrokerBasicDetails_Result> uspSaveBrokerBasicDetails(string firstName, string lastName, string phone, string email, string address, string zipCode, string title, string companyName, string language, string specialities, string password, string registrationCode, string companyLogoPath, string profilePicPath, string homeValue, string autoType, string revenue, string employees, string coverageAmt, string industryId, string subIndustryId, string longitude, string latitude, string bio)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var specialitiesParameter = specialities != null ?
                new ObjectParameter("Specialities", specialities) :
                new ObjectParameter("Specialities", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var registrationCodeParameter = registrationCode != null ?
                new ObjectParameter("RegistrationCode", registrationCode) :
                new ObjectParameter("RegistrationCode", typeof(string));
    
            var companyLogoPathParameter = companyLogoPath != null ?
                new ObjectParameter("CompanyLogoPath", companyLogoPath) :
                new ObjectParameter("CompanyLogoPath", typeof(string));
    
            var profilePicPathParameter = profilePicPath != null ?
                new ObjectParameter("ProfilePicPath", profilePicPath) :
                new ObjectParameter("ProfilePicPath", typeof(string));
    
            var homeValueParameter = homeValue != null ?
                new ObjectParameter("HomeValue", homeValue) :
                new ObjectParameter("HomeValue", typeof(string));
    
            var autoTypeParameter = autoType != null ?
                new ObjectParameter("AutoType", autoType) :
                new ObjectParameter("AutoType", typeof(string));
    
            var revenueParameter = revenue != null ?
                new ObjectParameter("Revenue", revenue) :
                new ObjectParameter("Revenue", typeof(string));
    
            var employeesParameter = employees != null ?
                new ObjectParameter("Employees", employees) :
                new ObjectParameter("Employees", typeof(string));
    
            var coverageAmtParameter = coverageAmt != null ?
                new ObjectParameter("CoverageAmt", coverageAmt) :
                new ObjectParameter("CoverageAmt", typeof(string));
    
            var industryIdParameter = industryId != null ?
                new ObjectParameter("IndustryId", industryId) :
                new ObjectParameter("IndustryId", typeof(string));
    
            var subIndustryIdParameter = subIndustryId != null ?
                new ObjectParameter("SubIndustryId", subIndustryId) :
                new ObjectParameter("SubIndustryId", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(string));
    
            var bioParameter = bio != null ?
                new ObjectParameter("Bio", bio) :
                new ObjectParameter("Bio", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSaveBrokerBasicDetails_Result>("uspSaveBrokerBasicDetails", firstNameParameter, lastNameParameter, phoneParameter, emailParameter, addressParameter, zipCodeParameter, titleParameter, companyNameParameter, languageParameter, specialitiesParameter, passwordParameter, registrationCodeParameter, companyLogoPathParameter, profilePicPathParameter, homeValueParameter, autoTypeParameter, revenueParameter, employeesParameter, coverageAmtParameter, industryIdParameter, subIndustryIdParameter, longitudeParameter, latitudeParameter, bioParameter);
        }
    
        public virtual ObjectResult<uspSaveBrokerChat_Result> uspSaveBrokerChat(Nullable<int> brokerMsgId, Nullable<int> brokerId, Nullable<int> customerId, string brokerMessage, Nullable<int> customerMsgId, string localDateTime)
        {
            var brokerMsgIdParameter = brokerMsgId.HasValue ?
                new ObjectParameter("BrokerMsgId", brokerMsgId) :
                new ObjectParameter("BrokerMsgId", typeof(int));
    
            var brokerIdParameter = brokerId.HasValue ?
                new ObjectParameter("BrokerId", brokerId) :
                new ObjectParameter("BrokerId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var brokerMessageParameter = brokerMessage != null ?
                new ObjectParameter("BrokerMessage", brokerMessage) :
                new ObjectParameter("BrokerMessage", typeof(string));
    
            var customerMsgIdParameter = customerMsgId.HasValue ?
                new ObjectParameter("CustomerMsgId", customerMsgId) :
                new ObjectParameter("CustomerMsgId", typeof(int));
    
            var localDateTimeParameter = localDateTime != null ?
                new ObjectParameter("LocalDateTime", localDateTime) :
                new ObjectParameter("LocalDateTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSaveBrokerChat_Result>("uspSaveBrokerChat", brokerMsgIdParameter, brokerIdParameter, customerIdParameter, brokerMessageParameter, customerMsgIdParameter, localDateTimeParameter);
        }
    
        public virtual int uspSaveBrokerCompanyDetails(Nullable<int> userId, string expComp, string expDesig, string expFromMonth, string expFromYear, string expToMonth, string expToYear, string expLogoPath)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var expCompParameter = expComp != null ?
                new ObjectParameter("ExpComp", expComp) :
                new ObjectParameter("ExpComp", typeof(string));
    
            var expDesigParameter = expDesig != null ?
                new ObjectParameter("ExpDesig", expDesig) :
                new ObjectParameter("ExpDesig", typeof(string));
    
            var expFromMonthParameter = expFromMonth != null ?
                new ObjectParameter("ExpFromMonth", expFromMonth) :
                new ObjectParameter("ExpFromMonth", typeof(string));
    
            var expFromYearParameter = expFromYear != null ?
                new ObjectParameter("ExpFromYear", expFromYear) :
                new ObjectParameter("ExpFromYear", typeof(string));
    
            var expToMonthParameter = expToMonth != null ?
                new ObjectParameter("ExpToMonth", expToMonth) :
                new ObjectParameter("ExpToMonth", typeof(string));
    
            var expToYearParameter = expToYear != null ?
                new ObjectParameter("ExpToYear", expToYear) :
                new ObjectParameter("ExpToYear", typeof(string));
    
            var expLogoPathParameter = expLogoPath != null ?
                new ObjectParameter("ExpLogoPath", expLogoPath) :
                new ObjectParameter("ExpLogoPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveBrokerCompanyDetails", userIdParameter, expCompParameter, expDesigParameter, expFromMonthParameter, expFromYearParameter, expToMonthParameter, expToYearParameter, expLogoPathParameter);
        }
    
        public virtual int uspSaveBrokerCompanyDetailsNew(Nullable<int> userId, string companyId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId != null ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveBrokerCompanyDetailsNew", userIdParameter, companyIdParameter);
        }
    
        public virtual int uspSaveBrokerEducationDetails(Nullable<int> userId, string education)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var educationParameter = education != null ?
                new ObjectParameter("Education", education) :
                new ObjectParameter("Education", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveBrokerEducationDetails", userIdParameter, educationParameter);
        }
    
        public virtual int uspSaveBrokerEducationDetailsNew(Nullable<int> userId, string school, string degree, string year, string eduLogoPath)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var schoolParameter = school != null ?
                new ObjectParameter("School", school) :
                new ObjectParameter("School", typeof(string));
    
            var degreeParameter = degree != null ?
                new ObjectParameter("Degree", degree) :
                new ObjectParameter("Degree", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var eduLogoPathParameter = eduLogoPath != null ?
                new ObjectParameter("EduLogoPath", eduLogoPath) :
                new ObjectParameter("EduLogoPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveBrokerEducationDetailsNew", userIdParameter, schoolParameter, degreeParameter, yearParameter, eduLogoPathParameter);
        }
    
        public virtual int uspSaveBrokerFiles(string fileName, Nullable<int> userId, string fieldName, string fieldName1, string renamedImageName)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var fieldName1Parameter = fieldName1 != null ?
                new ObjectParameter("FieldName1", fieldName1) :
                new ObjectParameter("FieldName1", typeof(string));
    
            var renamedImageNameParameter = renamedImageName != null ?
                new ObjectParameter("RenamedImageName", renamedImageName) :
                new ObjectParameter("RenamedImageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveBrokerFiles", fileNameParameter, userIdParameter, fieldNameParameter, fieldName1Parameter, renamedImageNameParameter);
        }
    
        public virtual int uspSaveBrokerIndustryDetails(Nullable<int> userId, string industryId, string subIndustryId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var industryIdParameter = industryId != null ?
                new ObjectParameter("IndustryId", industryId) :
                new ObjectParameter("IndustryId", typeof(string));
    
            var subIndustryIdParameter = subIndustryId != null ?
                new ObjectParameter("SubIndustryId", subIndustryId) :
                new ObjectParameter("SubIndustryId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveBrokerIndustryDetails", userIdParameter, industryIdParameter, subIndustryIdParameter);
        }
    
        public virtual int uspSaveBusinessInsuranceDetails(Nullable<int> userId, string zipCode, string city, string isInsured, string insuranceCompany, string sICCode, string revenue, string coverageExpires, string language, string notes, string longitude, string latitude, Nullable<int> industryId, string subIndustryId, string docPath, string declarationDocBase64)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var isInsuredParameter = isInsured != null ?
                new ObjectParameter("IsInsured", isInsured) :
                new ObjectParameter("IsInsured", typeof(string));
    
            var insuranceCompanyParameter = insuranceCompany != null ?
                new ObjectParameter("InsuranceCompany", insuranceCompany) :
                new ObjectParameter("InsuranceCompany", typeof(string));
    
            var sICCodeParameter = sICCode != null ?
                new ObjectParameter("SICCode", sICCode) :
                new ObjectParameter("SICCode", typeof(string));
    
            var revenueParameter = revenue != null ?
                new ObjectParameter("Revenue", revenue) :
                new ObjectParameter("Revenue", typeof(string));
    
            var coverageExpiresParameter = coverageExpires != null ?
                new ObjectParameter("CoverageExpires", coverageExpires) :
                new ObjectParameter("CoverageExpires", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var industryIdParameter = industryId.HasValue ?
                new ObjectParameter("IndustryId", industryId) :
                new ObjectParameter("IndustryId", typeof(int));
    
            var subIndustryIdParameter = subIndustryId != null ?
                new ObjectParameter("SubIndustryId", subIndustryId) :
                new ObjectParameter("SubIndustryId", typeof(string));
    
            var docPathParameter = docPath != null ?
                new ObjectParameter("DocPath", docPath) :
                new ObjectParameter("DocPath", typeof(string));
    
            var declarationDocBase64Parameter = declarationDocBase64 != null ?
                new ObjectParameter("DeclarationDocBase64", declarationDocBase64) :
                new ObjectParameter("DeclarationDocBase64", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveBusinessInsuranceDetails", userIdParameter, zipCodeParameter, cityParameter, isInsuredParameter, insuranceCompanyParameter, sICCodeParameter, revenueParameter, coverageExpiresParameter, languageParameter, notesParameter, longitudeParameter, latitudeParameter, industryIdParameter, subIndustryIdParameter, docPathParameter, declarationDocBase64Parameter);
        }
    
        public virtual int uspSaveLifeInsuranceDetails(Nullable<int> userId, string zipCode, string city, Nullable<bool> isInsured, string insuranceCompany, string language, string faceValue, string coverageExpires, string notes, string longitude, string latitude, string docPath, string declarationDocBase64)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var isInsuredParameter = isInsured.HasValue ?
                new ObjectParameter("IsInsured", isInsured) :
                new ObjectParameter("IsInsured", typeof(bool));
    
            var insuranceCompanyParameter = insuranceCompany != null ?
                new ObjectParameter("InsuranceCompany", insuranceCompany) :
                new ObjectParameter("InsuranceCompany", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var faceValueParameter = faceValue != null ?
                new ObjectParameter("FaceValue", faceValue) :
                new ObjectParameter("FaceValue", typeof(string));
    
            var coverageExpiresParameter = coverageExpires != null ?
                new ObjectParameter("CoverageExpires", coverageExpires) :
                new ObjectParameter("CoverageExpires", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var docPathParameter = docPath != null ?
                new ObjectParameter("DocPath", docPath) :
                new ObjectParameter("DocPath", typeof(string));
    
            var declarationDocBase64Parameter = declarationDocBase64 != null ?
                new ObjectParameter("DeclarationDocBase64", declarationDocBase64) :
                new ObjectParameter("DeclarationDocBase64", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveLifeInsuranceDetails", userIdParameter, zipCodeParameter, cityParameter, isInsuredParameter, insuranceCompanyParameter, languageParameter, faceValueParameter, coverageExpiresParameter, notesParameter, longitudeParameter, latitudeParameter, docPathParameter, declarationDocBase64Parameter);
        }
    
        public virtual ObjectResult<uspSetBrokerAvailabilityWithZipCode_Result> uspSetBrokerAvailabilityWithZipCode(Nullable<int> userId, Nullable<bool> availability)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var availabilityParameter = availability.HasValue ?
                new ObjectParameter("Availability", availability) :
                new ObjectParameter("Availability", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSetBrokerAvailabilityWithZipCode_Result>("uspSetBrokerAvailabilityWithZipCode", userIdParameter, availabilityParameter);
        }
    
        public virtual int uspSetBrokersAvailabilty(Nullable<int> userId, Nullable<bool> availability)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var availabilityParameter = availability.HasValue ?
                new ObjectParameter("Availability", availability) :
                new ObjectParameter("Availability", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetBrokersAvailabilty", userIdParameter, availabilityParameter);
        }
    
        public virtual int uspSetDeviceId(Nullable<int> userId, string deviceId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetDeviceId", userIdParameter, deviceIdParameter);
        }
    
        public virtual int uspSetIsRead(string messageId, Nullable<int> userId, Nullable<int> mainMessageId)
        {
            var messageIdParameter = messageId != null ?
                new ObjectParameter("MessageId", messageId) :
                new ObjectParameter("MessageId", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var mainMessageIdParameter = mainMessageId.HasValue ?
                new ObjectParameter("MainMessageId", mainMessageId) :
                new ObjectParameter("MainMessageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSetIsRead", messageIdParameter, userIdParameter, mainMessageIdParameter);
        }
    
        public virtual int uspUpdateBrokerBasicDetails(Nullable<int> userId, string firstName, string lastName, string phone, string area, string zipCode, string title, string companyName, string language, string specialities, string companyLogoPath, string profilePicPath, string homeValue, string autoType, string revenue, string employees, string coverageAmt, string industryId, string subIndustryId, string isProfilePhotoChanged, string isCompanyLogoChanged, string longitude, string latitude, string bio)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var specialitiesParameter = specialities != null ?
                new ObjectParameter("Specialities", specialities) :
                new ObjectParameter("Specialities", typeof(string));
    
            var companyLogoPathParameter = companyLogoPath != null ?
                new ObjectParameter("CompanyLogoPath", companyLogoPath) :
                new ObjectParameter("CompanyLogoPath", typeof(string));
    
            var profilePicPathParameter = profilePicPath != null ?
                new ObjectParameter("ProfilePicPath", profilePicPath) :
                new ObjectParameter("ProfilePicPath", typeof(string));
    
            var homeValueParameter = homeValue != null ?
                new ObjectParameter("HomeValue", homeValue) :
                new ObjectParameter("HomeValue", typeof(string));
    
            var autoTypeParameter = autoType != null ?
                new ObjectParameter("AutoType", autoType) :
                new ObjectParameter("AutoType", typeof(string));
    
            var revenueParameter = revenue != null ?
                new ObjectParameter("Revenue", revenue) :
                new ObjectParameter("Revenue", typeof(string));
    
            var employeesParameter = employees != null ?
                new ObjectParameter("Employees", employees) :
                new ObjectParameter("Employees", typeof(string));
    
            var coverageAmtParameter = coverageAmt != null ?
                new ObjectParameter("CoverageAmt", coverageAmt) :
                new ObjectParameter("CoverageAmt", typeof(string));
    
            var industryIdParameter = industryId != null ?
                new ObjectParameter("IndustryId", industryId) :
                new ObjectParameter("IndustryId", typeof(string));
    
            var subIndustryIdParameter = subIndustryId != null ?
                new ObjectParameter("SubIndustryId", subIndustryId) :
                new ObjectParameter("SubIndustryId", typeof(string));
    
            var isProfilePhotoChangedParameter = isProfilePhotoChanged != null ?
                new ObjectParameter("IsProfilePhotoChanged", isProfilePhotoChanged) :
                new ObjectParameter("IsProfilePhotoChanged", typeof(string));
    
            var isCompanyLogoChangedParameter = isCompanyLogoChanged != null ?
                new ObjectParameter("IsCompanyLogoChanged", isCompanyLogoChanged) :
                new ObjectParameter("IsCompanyLogoChanged", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(string));
    
            var bioParameter = bio != null ?
                new ObjectParameter("Bio", bio) :
                new ObjectParameter("Bio", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateBrokerBasicDetails", userIdParameter, firstNameParameter, lastNameParameter, phoneParameter, areaParameter, zipCodeParameter, titleParameter, companyNameParameter, languageParameter, specialitiesParameter, companyLogoPathParameter, profilePicPathParameter, homeValueParameter, autoTypeParameter, revenueParameter, employeesParameter, coverageAmtParameter, industryIdParameter, subIndustryIdParameter, isProfilePhotoChangedParameter, isCompanyLogoChangedParameter, longitudeParameter, latitudeParameter, bioParameter);
        }
    
        public virtual ObjectResult<string> uspUpdateBrokerForAndroid(Nullable<int> userId, string firstName, string lastName, string address, string city, string state, string country, string pinCode, string mobNo, string companyName, string title, string resume, string designation, string languages, string specialities, string dOB, string profilePicture, string phoneNo, string awards, string skills, string recomendations, string license, string expiryDate, string exp_Designation, string exp_CompanyName, string exp_DurationFrom, string exp_DurationTo, string exp_Bio, string edu_UniversityName, string edu_CourseName, string edu_DurationFrom, string edu_DurationTo, string updateTable, string profilePicImagePath, string resumeImagePath, string isProfilePicUpdated, string longitude, string latitude, string homeValue, string autoType, string revenue, string employees, string coverageAmt, string isCompanyLogoUpdated, string companyLogoPath, string edu_Logo, string industryId, string subIndustryId, string userBio, string exp_Logo)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var pinCodeParameter = pinCode != null ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(string));
    
            var mobNoParameter = mobNo != null ?
                new ObjectParameter("MobNo", mobNo) :
                new ObjectParameter("MobNo", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var resumeParameter = resume != null ?
                new ObjectParameter("Resume", resume) :
                new ObjectParameter("Resume", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var languagesParameter = languages != null ?
                new ObjectParameter("Languages", languages) :
                new ObjectParameter("Languages", typeof(string));
    
            var specialitiesParameter = specialities != null ?
                new ObjectParameter("Specialities", specialities) :
                new ObjectParameter("Specialities", typeof(string));
    
            var dOBParameter = dOB != null ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(string));
    
            var profilePictureParameter = profilePicture != null ?
                new ObjectParameter("ProfilePicture", profilePicture) :
                new ObjectParameter("ProfilePicture", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var awardsParameter = awards != null ?
                new ObjectParameter("Awards", awards) :
                new ObjectParameter("Awards", typeof(string));
    
            var skillsParameter = skills != null ?
                new ObjectParameter("Skills", skills) :
                new ObjectParameter("Skills", typeof(string));
    
            var recomendationsParameter = recomendations != null ?
                new ObjectParameter("Recomendations", recomendations) :
                new ObjectParameter("Recomendations", typeof(string));
    
            var licenseParameter = license != null ?
                new ObjectParameter("License", license) :
                new ObjectParameter("License", typeof(string));
    
            var expiryDateParameter = expiryDate != null ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(string));
    
            var exp_DesignationParameter = exp_Designation != null ?
                new ObjectParameter("Exp_Designation", exp_Designation) :
                new ObjectParameter("Exp_Designation", typeof(string));
    
            var exp_CompanyNameParameter = exp_CompanyName != null ?
                new ObjectParameter("Exp_CompanyName", exp_CompanyName) :
                new ObjectParameter("Exp_CompanyName", typeof(string));
    
            var exp_DurationFromParameter = exp_DurationFrom != null ?
                new ObjectParameter("Exp_DurationFrom", exp_DurationFrom) :
                new ObjectParameter("Exp_DurationFrom", typeof(string));
    
            var exp_DurationToParameter = exp_DurationTo != null ?
                new ObjectParameter("Exp_DurationTo", exp_DurationTo) :
                new ObjectParameter("Exp_DurationTo", typeof(string));
    
            var exp_BioParameter = exp_Bio != null ?
                new ObjectParameter("Exp_Bio", exp_Bio) :
                new ObjectParameter("Exp_Bio", typeof(string));
    
            var edu_UniversityNameParameter = edu_UniversityName != null ?
                new ObjectParameter("Edu_UniversityName", edu_UniversityName) :
                new ObjectParameter("Edu_UniversityName", typeof(string));
    
            var edu_CourseNameParameter = edu_CourseName != null ?
                new ObjectParameter("Edu_CourseName", edu_CourseName) :
                new ObjectParameter("Edu_CourseName", typeof(string));
    
            var edu_DurationFromParameter = edu_DurationFrom != null ?
                new ObjectParameter("Edu_DurationFrom", edu_DurationFrom) :
                new ObjectParameter("Edu_DurationFrom", typeof(string));
    
            var edu_DurationToParameter = edu_DurationTo != null ?
                new ObjectParameter("Edu_DurationTo", edu_DurationTo) :
                new ObjectParameter("Edu_DurationTo", typeof(string));
    
            var updateTableParameter = updateTable != null ?
                new ObjectParameter("UpdateTable", updateTable) :
                new ObjectParameter("UpdateTable", typeof(string));
    
            var profilePicImagePathParameter = profilePicImagePath != null ?
                new ObjectParameter("ProfilePicImagePath", profilePicImagePath) :
                new ObjectParameter("ProfilePicImagePath", typeof(string));
    
            var resumeImagePathParameter = resumeImagePath != null ?
                new ObjectParameter("ResumeImagePath", resumeImagePath) :
                new ObjectParameter("ResumeImagePath", typeof(string));
    
            var isProfilePicUpdatedParameter = isProfilePicUpdated != null ?
                new ObjectParameter("IsProfilePicUpdated", isProfilePicUpdated) :
                new ObjectParameter("IsProfilePicUpdated", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(string));
    
            var homeValueParameter = homeValue != null ?
                new ObjectParameter("HomeValue", homeValue) :
                new ObjectParameter("HomeValue", typeof(string));
    
            var autoTypeParameter = autoType != null ?
                new ObjectParameter("AutoType", autoType) :
                new ObjectParameter("AutoType", typeof(string));
    
            var revenueParameter = revenue != null ?
                new ObjectParameter("Revenue", revenue) :
                new ObjectParameter("Revenue", typeof(string));
    
            var employeesParameter = employees != null ?
                new ObjectParameter("Employees", employees) :
                new ObjectParameter("Employees", typeof(string));
    
            var coverageAmtParameter = coverageAmt != null ?
                new ObjectParameter("CoverageAmt", coverageAmt) :
                new ObjectParameter("CoverageAmt", typeof(string));
    
            var isCompanyLogoUpdatedParameter = isCompanyLogoUpdated != null ?
                new ObjectParameter("IsCompanyLogoUpdated", isCompanyLogoUpdated) :
                new ObjectParameter("IsCompanyLogoUpdated", typeof(string));
    
            var companyLogoPathParameter = companyLogoPath != null ?
                new ObjectParameter("CompanyLogoPath", companyLogoPath) :
                new ObjectParameter("CompanyLogoPath", typeof(string));
    
            var edu_LogoParameter = edu_Logo != null ?
                new ObjectParameter("Edu_Logo", edu_Logo) :
                new ObjectParameter("Edu_Logo", typeof(string));
    
            var industryIdParameter = industryId != null ?
                new ObjectParameter("IndustryId", industryId) :
                new ObjectParameter("IndustryId", typeof(string));
    
            var subIndustryIdParameter = subIndustryId != null ?
                new ObjectParameter("SubIndustryId", subIndustryId) :
                new ObjectParameter("SubIndustryId", typeof(string));
    
            var userBioParameter = userBio != null ?
                new ObjectParameter("UserBio", userBio) :
                new ObjectParameter("UserBio", typeof(string));
    
            var exp_LogoParameter = exp_Logo != null ?
                new ObjectParameter("Exp_Logo", exp_Logo) :
                new ObjectParameter("Exp_Logo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspUpdateBrokerForAndroid", userIdParameter, firstNameParameter, lastNameParameter, addressParameter, cityParameter, stateParameter, countryParameter, pinCodeParameter, mobNoParameter, companyNameParameter, titleParameter, resumeParameter, designationParameter, languagesParameter, specialitiesParameter, dOBParameter, profilePictureParameter, phoneNoParameter, awardsParameter, skillsParameter, recomendationsParameter, licenseParameter, expiryDateParameter, exp_DesignationParameter, exp_CompanyNameParameter, exp_DurationFromParameter, exp_DurationToParameter, exp_BioParameter, edu_UniversityNameParameter, edu_CourseNameParameter, edu_DurationFromParameter, edu_DurationToParameter, updateTableParameter, profilePicImagePathParameter, resumeImagePathParameter, isProfilePicUpdatedParameter, longitudeParameter, latitudeParameter, homeValueParameter, autoTypeParameter, revenueParameter, employeesParameter, coverageAmtParameter, isCompanyLogoUpdatedParameter, companyLogoPathParameter, edu_LogoParameter, industryIdParameter, subIndustryIdParameter, userBioParameter, exp_LogoParameter);
        }
    
        public virtual int uspUpdateBrokerPaymentDoneFlag(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateBrokerPaymentDoneFlag", userIdParameter);
        }
    
        public virtual ObjectResult<string> uspUpdateCustomerForAndroid(Nullable<int> userId, string firstName, string lastName, string address, string city, string state, string country, string pinCode, string mobNo, string houseType, string addressOfHouse, Nullable<bool> isHavingCar, string noOfCars, string typeOfEmployment, string companyName, string profilePicture, string phoneNo, string dOB, string profilePicImagePath, string isProfilePicUpdated, string noOfEmp, string website, string estPremium)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var pinCodeParameter = pinCode != null ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(string));
    
            var mobNoParameter = mobNo != null ?
                new ObjectParameter("MobNo", mobNo) :
                new ObjectParameter("MobNo", typeof(string));
    
            var houseTypeParameter = houseType != null ?
                new ObjectParameter("HouseType", houseType) :
                new ObjectParameter("HouseType", typeof(string));
    
            var addressOfHouseParameter = addressOfHouse != null ?
                new ObjectParameter("AddressOfHouse", addressOfHouse) :
                new ObjectParameter("AddressOfHouse", typeof(string));
    
            var isHavingCarParameter = isHavingCar.HasValue ?
                new ObjectParameter("IsHavingCar", isHavingCar) :
                new ObjectParameter("IsHavingCar", typeof(bool));
    
            var noOfCarsParameter = noOfCars != null ?
                new ObjectParameter("NoOfCars", noOfCars) :
                new ObjectParameter("NoOfCars", typeof(string));
    
            var typeOfEmploymentParameter = typeOfEmployment != null ?
                new ObjectParameter("TypeOfEmployment", typeOfEmployment) :
                new ObjectParameter("TypeOfEmployment", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var profilePictureParameter = profilePicture != null ?
                new ObjectParameter("ProfilePicture", profilePicture) :
                new ObjectParameter("ProfilePicture", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var dOBParameter = dOB != null ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(string));
    
            var profilePicImagePathParameter = profilePicImagePath != null ?
                new ObjectParameter("ProfilePicImagePath", profilePicImagePath) :
                new ObjectParameter("ProfilePicImagePath", typeof(string));
    
            var isProfilePicUpdatedParameter = isProfilePicUpdated != null ?
                new ObjectParameter("IsProfilePicUpdated", isProfilePicUpdated) :
                new ObjectParameter("IsProfilePicUpdated", typeof(string));
    
            var noOfEmpParameter = noOfEmp != null ?
                new ObjectParameter("NoOfEmp", noOfEmp) :
                new ObjectParameter("NoOfEmp", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var estPremiumParameter = estPremium != null ?
                new ObjectParameter("EstPremium", estPremium) :
                new ObjectParameter("EstPremium", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspUpdateCustomerForAndroid", userIdParameter, firstNameParameter, lastNameParameter, addressParameter, cityParameter, stateParameter, countryParameter, pinCodeParameter, mobNoParameter, houseTypeParameter, addressOfHouseParameter, isHavingCarParameter, noOfCarsParameter, typeOfEmploymentParameter, companyNameParameter, profilePictureParameter, phoneNoParameter, dOBParameter, profilePicImagePathParameter, isProfilePicUpdatedParameter, noOfEmpParameter, websiteParameter, estPremiumParameter);
        }
    
        public virtual int uspUpdateEducationDetails(Nullable<int> eduId, Nullable<int> userId, string edu_UniversityName, string edu_CourseName, string edu_DurationFrom, string edu_DurationTo, string edu_Logo, string isUpdated)
        {
            var eduIdParameter = eduId.HasValue ?
                new ObjectParameter("EduId", eduId) :
                new ObjectParameter("EduId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var edu_UniversityNameParameter = edu_UniversityName != null ?
                new ObjectParameter("Edu_UniversityName", edu_UniversityName) :
                new ObjectParameter("Edu_UniversityName", typeof(string));
    
            var edu_CourseNameParameter = edu_CourseName != null ?
                new ObjectParameter("Edu_CourseName", edu_CourseName) :
                new ObjectParameter("Edu_CourseName", typeof(string));
    
            var edu_DurationFromParameter = edu_DurationFrom != null ?
                new ObjectParameter("Edu_DurationFrom", edu_DurationFrom) :
                new ObjectParameter("Edu_DurationFrom", typeof(string));
    
            var edu_DurationToParameter = edu_DurationTo != null ?
                new ObjectParameter("Edu_DurationTo", edu_DurationTo) :
                new ObjectParameter("Edu_DurationTo", typeof(string));
    
            var edu_LogoParameter = edu_Logo != null ?
                new ObjectParameter("Edu_Logo", edu_Logo) :
                new ObjectParameter("Edu_Logo", typeof(string));
    
            var isUpdatedParameter = isUpdated != null ?
                new ObjectParameter("IsUpdated", isUpdated) :
                new ObjectParameter("IsUpdated", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateEducationDetails", eduIdParameter, userIdParameter, edu_UniversityNameParameter, edu_CourseNameParameter, edu_DurationFromParameter, edu_DurationToParameter, edu_LogoParameter, isUpdatedParameter);
        }
    
        public virtual ObjectResult<uspVerifyEmailId_Result> uspVerifyEmailId(string emailId, string registrationCode)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var registrationCodeParameter = registrationCode != null ?
                new ObjectParameter("RegistrationCode", registrationCode) :
                new ObjectParameter("RegistrationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspVerifyEmailId_Result>("uspVerifyEmailId", emailIdParameter, registrationCodeParameter);
        }
    
        public virtual ObjectResult<uspViewUserProfile_Result> uspViewUserProfile(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspViewUserProfile_Result>("uspViewUserProfile", userIdParameter);
        }
    
        public virtual ObjectResult<uspSaveCustomerChat_Result> uspSaveCustomerChat(Nullable<int> custMsgId, Nullable<int> customerId, Nullable<int> brokerId, string customerMessage, Nullable<int> brokerMsgId, string localDateTime)
        {
            var custMsgIdParameter = custMsgId.HasValue ?
                new ObjectParameter("CustMsgId", custMsgId) :
                new ObjectParameter("CustMsgId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var brokerIdParameter = brokerId.HasValue ?
                new ObjectParameter("BrokerId", brokerId) :
                new ObjectParameter("BrokerId", typeof(int));
    
            var customerMessageParameter = customerMessage != null ?
                new ObjectParameter("CustomerMessage", customerMessage) :
                new ObjectParameter("CustomerMessage", typeof(string));
    
            var brokerMsgIdParameter = brokerMsgId.HasValue ?
                new ObjectParameter("BrokerMsgId", brokerMsgId) :
                new ObjectParameter("BrokerMsgId", typeof(int));
    
            var localDateTimeParameter = localDateTime != null ?
                new ObjectParameter("LocalDateTime", localDateTime) :
                new ObjectParameter("LocalDateTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSaveCustomerChat_Result>("uspSaveCustomerChat", custMsgIdParameter, customerIdParameter, brokerIdParameter, customerMessageParameter, brokerMsgIdParameter, localDateTimeParameter);
        }
    
        public virtual ObjectResult<spCheckUserExist_Result> spCheckUserExist(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCheckUserExist_Result>("spCheckUserExist", userNameParameter);
        }
    
        public virtual ObjectResult<uspSaveCustomerBasicDetails_Result> uspSaveCustomerBasicDetails(string firstName, string lastName, string phone, string email, string address, string zipCode, string password, string registrationCode, string houseType, string isHavingCars, Nullable<int> noOfCars, string occupation, string companyName, string noofEmployee, string estPremium, string website, string registeredFor)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var registrationCodeParameter = registrationCode != null ?
                new ObjectParameter("RegistrationCode", registrationCode) :
                new ObjectParameter("RegistrationCode", typeof(string));
    
            var houseTypeParameter = houseType != null ?
                new ObjectParameter("HouseType", houseType) :
                new ObjectParameter("HouseType", typeof(string));
    
            var isHavingCarsParameter = isHavingCars != null ?
                new ObjectParameter("IsHavingCars", isHavingCars) :
                new ObjectParameter("IsHavingCars", typeof(string));
    
            var noOfCarsParameter = noOfCars.HasValue ?
                new ObjectParameter("NoOfCars", noOfCars) :
                new ObjectParameter("NoOfCars", typeof(int));
    
            var occupationParameter = occupation != null ?
                new ObjectParameter("Occupation", occupation) :
                new ObjectParameter("Occupation", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var noofEmployeeParameter = noofEmployee != null ?
                new ObjectParameter("NoofEmployee", noofEmployee) :
                new ObjectParameter("NoofEmployee", typeof(string));
    
            var estPremiumParameter = estPremium != null ?
                new ObjectParameter("EstPremium", estPremium) :
                new ObjectParameter("EstPremium", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var registeredForParameter = registeredFor != null ?
                new ObjectParameter("RegisteredFor", registeredFor) :
                new ObjectParameter("RegisteredFor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSaveCustomerBasicDetails_Result>("uspSaveCustomerBasicDetails", firstNameParameter, lastNameParameter, phoneParameter, emailParameter, addressParameter, zipCodeParameter, passwordParameter, registrationCodeParameter, houseTypeParameter, isHavingCarsParameter, noOfCarsParameter, occupationParameter, companyNameParameter, noofEmployeeParameter, estPremiumParameter, websiteParameter, registeredForParameter);
        }
    
        public virtual ObjectResult<spCheckUserLogin_Result> spCheckUserLogin(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCheckUserLogin_Result>("spCheckUserLogin", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<string> uspGetDeviceId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspGetDeviceId", userIdParameter);
        }
    }
}
